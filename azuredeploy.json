{
	"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"projectName": {
			"type": "string",
			"defaultValue": "mioty-sample",
			"metadata": {
				"description": "Specifies a project name that is used to generate the Event Hub name and the Namespace name."
			}
		}
	},
	"variables": {
		"eventHubNamespaceName": "[concat(parameters('projectName'), '-ns-', uniqueString(resourceGroup().id))]",
		"eventHubName": "[parameters('projectName')]",
		"iotHubName": "[concat(parameters('projectName'), '-Hub-', uniqueString(resourceGroup().id))]",
		"streamAnalyticsJobName": "[concat(parameters('projectName'), '-Hub-', uniqueString(resourceGroup().id))]",
		"storageAccountName": "[uniqueString(resourceGroup().id)]",
        "hostingPlanName": "[concat(parameters('projectName'), '-farm-', uniqueString(resourceGroup().id))]",
        "functionAppName": "[concat(parameters('projectName'), '-func-', uniqueString(resourceGroup().id))]"
	},
	"resources": [
		{
			"type": "Microsoft.EventHub/namespaces",
			"apiVersion": "2018-01-01-preview",
			"name": "[variables('eventHubNamespaceName')]",
			"location": "[resourceGroup().location]",
			"sku": {
				"name": "Standard",
				"tier": "Standard",
				"capacity": 1
			},
			"properties": {
				"isAutoInflateEnabled": false,
				"maximumThroughputUnits": 0
			}
		},
		{
			"type": "Microsoft.EventHub/namespaces/eventhubs",
			"apiVersion": "2017-04-01",
			"name": "[concat(variables('eventHubNamespaceName'), '/', variables('eventHubName'))]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName'))]"
			],
			"properties": {
				"messageRetentionInDays": 7,
				"partitionCount": 1
			}
        },
        {
            "type": "Microsoft.EventHub/namespaces/AuthorizationRules",
            "apiVersion": "2017-04-01",
            "name": "[concat(variables('eventHubNamespaceName'), '/RootManageSharedAccessKey')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName'))]"
            ],
            "properties": {
                "rights": [
                    "Listen",
                    "Manage",
                    "Send"
                ]
            }
        },
		{
			"type": "Microsoft.Devices/IotHubs",
			"apiVersion": "2020-07-10-preview",
			"name": "[variables('IoTHubName')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[resourceId('Microsoft.EventHub/namespaces/eventhubs', variables('eventHubNamespaceName'), variables('eventHubName'))]"
			],
			"sku": {
				"name": "S1",
				"tier": "Standard",
				"capacity": 1
			},
			"properties": {
				"eventHubEndpoints": {
					"events": {
						"retentionTimeInDays": 1,
						"partitionCount": 4
					}
				},
				"routing": {
					"fallbackRoute": {
						"name": "$fallback",
						"source": "DeviceMessages",
						"condition": "true",
						"endpointNames": [
							"events"
						],
						"isEnabled": true
					}
				},
				"messagingEndpoints": {
					"fileNotifications": {
						"lockDurationAsIso8601": "PT1M",
						"ttlAsIso8601": "PT1H",
						"maxDeliveryCount": 10
					}
				},
				"enableFileUploadNotifications": false,
				"cloudToDevice": {
					"maxDeliveryCount": 10,
					"defaultTtlAsIso8601": "PT1H",
					"feedback": {
						"lockDurationAsIso8601": "PT1M",
						"ttlAsIso8601": "PT1H",
						"maxDeliveryCount": 10
					}
				}
			}
		},
		{
			"type": "Microsoft.StreamAnalytics/StreamingJobs",
			"apiVersion": "2017-04-01-preview",
			"name": "[variables('streamAnalyticsJobName')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[resourceId('Microsoft.Devices/IotHubs', variables('IoTHubName'))]",
				"[resourceId('Microsoft.EventHub/namespaces/eventhubs', variables('eventHubNamespaceName'), variables('eventHubName') )]"
			],
			"properties": {
				"sku": {
					"name": "standard"
				},
				"outputErrorPolicy": "stop",
				"eventsOutOfOrderPolicy": "adjust",
				"eventsOutOfOrderMaxDelayInSeconds": 0,
				"eventsLateArrivalMaxDelayInSeconds": 5,
				"dataLocale": "en-US",
				"compatibilityLevel": "1.2",
				"jobType": "Cloud",
				"inputs": [
					{
						"name": "IotHubInput",
						"properties": {
							"type": "Stream",
							"datasource": {
								"type": "Microsoft.Devices/IotHubs",
								"properties": {
									"iotHubNamespace": "[variables('IoTHubName')]",
									"consumerGroupName": "asa",
									"endpoint": "messages/events",
									"sharedAccessPolicyKey": "[listkeys(resourceId('Microsoft.Devices/IotHubs/IotHubKeys', variables('IoTHubName'), 'iothubowner'), '2016-02-03').primaryKey]",
									"sharedAccessPolicyName": "iothubowner"
								}
							},
							"compression": {
								"type": "None"
							},
							"serialization": {
								"type": "Json",
								"properties": {
									"encoding": "UTF8"
								}
							}
						}
					}
				],
				"transformation": {
					"name": "Transformation",
					"properties": {
						"streamingUnits": 1,
						"query": "WITH \r\nFlattenedData AS (\r\n    SELECT\r\n        DataRecords.ArrayValue.uid AS uid,\r\n        DataRecords.ArrayValue.rssi AS rssi,\r\n        DataRecords.ArrayValue.snr AS snr,\r\n        DataRecords.ArrayValue.type AS type,\r\n        DataRecords.ArrayValue.ts AS ts,\r\n        DataRecords.ArrayValue.frame AS frame,\r\n        i.EventProcessedUtcTime,\r\n        i.PartitionId,\r\n        i.EventEnqueuedUtcTime,\r\n        i.IotHub.MessageId AS IotHubMessageId,\r\n        i.IotHub.CorrelationId AS IotHubCorrelationId,\r\n        i.IotHub.ConnectionDeviceId AS IotHubConnectionDeviceId,\r\n        i.IotHub.ConnectionDeviceGenerationId AS IotHubConnectionDeviceGenerationId,\r\n        i.IotHub.EnqueuedTime AS IotHubEnqueuedTime,\r\n        i.IotHub.StreamId AS IotHubStreamId\r\n    FROM IotHubInput i\r\n    CROSS APPLY GetArrayElements(data) AS DataRecords\r\n    WHERE i.data IS NOT NULL\r\n),\r\nDistData AS (\r\n    SELECT\r\n        uda.RemoveDups(f)\r\n    FROM FlattenedData f\r\n    GROUP BY tumblingwindow(second, 10)\r\n)\r\n\r\nSELECT\r\n    DataRecords.ArrayValue.hash AS hash,\r\n    DataRecords.ArrayValue.uid AS uid,\r\n    DataRecords.ArrayValue.rssi AS rssi,\r\n    DataRecords.ArrayValue.snr AS snr,\r\n    DataRecords.ArrayValue.type AS type,\r\n    DataRecords.ArrayValue.ts AS ts,\r\n    DataRecords.ArrayValue.frame AS frame,\r\n    DataRecords.ArrayValue.EventProcessedUtcTime AS EventProcessedUtcTime,\r\n    DataRecords.ArrayValue.PartitionId AS PartitionId,\r\n    DataRecords.ArrayValue.EventEnqueuedUtcTime AS EventEnqueuedUtcTime,\r\n    DataRecords.ArrayValue.IotHubMessageId AS IotHubMessageId,\r\n    DataRecords.ArrayValue.IotHubCorrelationId AS IotHubCorrelationId,\r\n    DataRecords.ArrayValue.IotHubConnectionDeviceId AS IotHubConnectionDeviceId,\r\n    DataRecords.ArrayValue.IotHubConnectionDeviceGenerationId AS IotHubConnectionDeviceGenerationId,\r\n    DataRecords.ArrayValue.IotHubEnqueuedTime AS IotHubEnqueuedTime,\r\n    DataRecords.ArrayValue.IotHubStreamId AS IotHubStreamId\r\nINTO StorageOutput\r\nFROM DistData d\r\nCROSS APPLY GetArrayElements(d.RemoveDups.data) AS DataRecords\r\nWHERE d.RemoveDups.data IS NOT NULL\r\n"
					}
				},
				"outputs": [
					{
						"name": "EventHubOutput",
						"properties": {
							"dataSource": {
								"type": "Microsoft.ServiceBus/EventHub",
								"properties": {
									"eventHubName": "[variables('eventHubName')]",
									"serviceBusNamespace": "[variables('eventHubNamespaceName')]",
									"sharedAccessPolicyKey": "[listKeys(resourceId('Microsoft.EventHub/namespaces/authorizationRules', variables('eventHubNamespaceName'),  'RootManageSharedAccessKey'),'2017-04-01').primaryKey]",
									"sharedAccessPolicyName": "RootManageSharedAccessKey"
								}
							},
							"serialization": {
								"properties": {
									"encoding": "UTF8"
								},
								"type": "Json"
							}
						}
					}
				],
				"functions": [
					{
						"name": "RemoveDups",
						"properties": {
							"type": "Aggregate",
							"properties": {
								"inputs": [
									{
										"dataType": "any"
									},
									{
										"dataType": "any"
									}
								],
								"output": {
									"dataType": "record"
								},
								"binding": {
									"type": "Microsoft.StreamAnalytics/JavascriptUdf",
									"properties": {
										"script": "/*\r\n * UDA to remove duplicate elements from the timewindow where this\r\n * function is used. Uses custom logic to determine if an item is \r\n * a duplicate or not. The logic is based on the mioty rules given to MSFT.\r\n */\r\nfunction RemoveDups() {\r\n    'use strict';\r\n\r\n    /*\r\n     * Set the initial state when this function is called.\r\n     */\r\n    this.init = function () {\r\n        this.state = new Array();\r\n    }\r\n\r\n    /*\r\n     * Called when an event enters the time window. We add the \r\n     * event to the array of events.\r\n     */\r\n    this.accumulate = function (value, timestamp) {\r\n        this.state.push(value);\r\n    }\r\n\r\n    /*\r\n     * Called when the time windows ends to compute the results.\r\n     * We use our custom logic to determine and remove duplicates\r\n     * at this point in time.\r\n     */\r\n    this.computeResult = function () {\r\n        // Calculates a base hash from uid and frame and sets\r\n        // the stage for the following logic.\r\n        for (var i = 0; i < this.state.length; i++) {\r\n            var item = this.state[i];\r\n\r\n            item.hash = this.stringToHash(item.uid + item.frame);\r\n            item.isModified = false;\r\n        }\r\n\r\n        // This loop compares each item with the others\r\n        // in the array to see if the timestamp is similar\r\n        // as well. If uid, frame and timestamp are similar\r\n        // the item will be treated as a duplicate.\r\n        for (var i = 0; i < this.state.length; i++) {\r\n            var item = this.state[i];\r\n\r\n            // Do not act on items already modified to avoid\r\n            // endless overriding!\r\n            if (item.isModified) {\r\n                continue;\r\n            }\r\n\r\n            // Calculate the new hash, this time with timestamp included\r\n            var newHash = this.stringToHash(item.uid + item.frame + item.ts);\r\n\r\n            // Set current item as modified and set the new hash\r\n            item.isModified = true;\r\n            item.hash = newHash;\r\n\r\n            // Time to inspect the other items in the array and search for\r\n            // similar ones that might be duplicates.\r\n            for (var j = 0; j < this.state.length; j++) {\r\n                var compareItem = this.state[j];\r\n\r\n                // Do not act on items already modified to avoid\r\n                // endless overriding!\r\n                if (compareItem.isModified) {\r\n                    continue;\r\n                }\r\n\r\n                // Items with same uid, frame and similar timestamp will get the same new hash\r\n                if (compareItem.uid === item.uid &&\r\n                    compareItem.frame === item.frame &&\r\n                    this.hasSimliarTimestamp(compareItem.ts, item.ts, 5)) {\r\n                    //set as modified and apply same hash as for root item to mark them similar\r\n                    compareItem.isModified = true;\r\n                    compareItem.hash = newHash;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Time to sort those duplicates out into this new array\r\n        var uniqueArray = new Array();\r\n\r\n        // Check each item\r\n        for (var i = 0; i < this.state.length; i++) {\r\n            var item = this.state[i];\r\n\r\n            // Use helper to find out if an item with the same hash \r\n            // is already in the unique array and continue if true\r\n            if (this.containsItem(uniqueArray, item)) {\r\n                continue;\r\n            }\r\n\r\n            // If not in array, add it\r\n            uniqueArray.push(item);\r\n        }\r\n\r\n        //return the unique array and reuse json structure from input\r\n        return { data: uniqueArray };\r\n    }\r\n\r\n    //========================\r\n    // Helper Functions\r\n    //========================\r\n\r\n    /*\r\n     * Checks if the given array contains the given items.\r\n     */\r\n    this.containsItem = function (uniqueArray, item) {\r\n        for (var i = 0; i < uniqueArray.length; i++) {\r\n            var uniqueItem = uniqueArray[i];\r\n\r\n            if (uniqueItem.hash === item.hash) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /*\r\n     * Checks if given two date strings are close to each other by using the \r\n     * given threshold in seconds. If they are more seconds away than the \r\n     * threshold it will be false, otherwise true to mark them as similar.\r\n     */\r\n    this.hasSimliarTimestamp = function (dateString1, dateString2, thresholdInSeconds) {\r\n        var t1 = new Date(dateString1);\r\n        var t2 = new Date(dateString2);\r\n        var dif = t1.getTime() - t2.getTime();\r\n\r\n        var Seconds_from_T1_to_T2 = dif / 1000;\r\n        var Seconds_Between_Dates = Math.abs(Seconds_from_T1_to_T2);\r\n\r\n        return Seconds_Between_Dates <= thresholdInSeconds;\r\n    }\r\n\r\n    /*\r\n     * Computes a simple integer hash for the given input string.\r\n     */\r\n    this.stringToHash = function (string) {\r\n        var hash = 0;\r\n        if (string.length == 0) return hash;\r\n\r\n        for (var i = 0; i < string.length; i++) {\r\n            var char = string.charCodeAt(i);\r\n            hash = ((hash << 5) - hash) + char;\r\n            hash = hash & hash;\r\n        }\r\n\r\n        return hash;\r\n    } \r\n}"
									}
								}
							}
						}
					}
				]
			}
		},
		{
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-06-01",
            "name": "[variables('storageAccountName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "Storage",
            "properties": {
                "supportsHttpsTrafficOnly": true
            },
            "resources": [
                {
                    "type": "blobServices/containers",
                    "apiVersion": "2019-06-01",
                    "name": "default/mioty-keys",
                    "dependsOn": [
                        "[variables('storageAccountName')]"
                    ]
                }
            ]
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2020-06-01",
            "name": "[variables('hostingPlanName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
				"[resourceId('Microsoft.Devices/IotHubs', variables('IoTHubName'))]"
            ],
            "sku": {
                "name": "Y1",
                "tier": "Dynamic"
            },
            "properties": {
                "name": "[variables('hostingPlanName')]",
                "computeMode": "Dynamic"
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2020-06-01",
            "name": "[variables('functionAppName')]",
            "location": "[resourceGroup().location]",
            "kind": "functionapp",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ],
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTSHARE",
                            "value": "[toLower(variables('functionAppName'))]"
                        },
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~3"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "dotnet"
                        },
                        {
                            "name": "WEBSITE_RUN_FROM_PACKAGE",
                            "value": "1"
                        },
                        {
                            "name": "IotHubConnectionString",
                            "value": "[concat('HostName=', reference(resourceId('Microsoft.Devices/IoTHubs', variables('IoTHubName')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).hostName, ';SharedAccessKeyName=iothubowner;SharedAccessKey=', listKeys(resourceId('Microsoft.Devices/IotHubs', variables('IoTHubName')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).value[0].primaryKey)]"
                        }
                    ]
                }
            }
        }
	]
}